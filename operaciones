
// Definición de clase para representar vectores en 3D
data class Vector3D(val x: Double, val y: Double, val z: Double) {
    // Método para sumar dos vectores
    operator fun plus(other: Vector3D): Vector3D {
        return Vector3D(x + other.x, y + other.y, z + other.z)
    }

    // Método para multiplicar un vector por un escalar
    operator fun times(scalar: Double): Vector3D {
        return Vector3D(x * scalar, y * scalar, z * scalar)
    }

    // Método para calcular el producto escalar de dos vectores
    infix fun dotProduct(other: Vector3D): Double {
        return x * other.x + y * other.y + z * other.z
    }

    // Método para calcular el producto cruz de dos vectores
    infix fun crossProduct(other: Vector3D): Vector3D {
        val crossX = y * other.z - z * other.y
        val crossY = z * other.x - x * other.z
        val crossZ = x * other.y - y * other.x
        return Vector3D(crossX, crossY, crossZ)
    }

    // Método para calcular la magnitud (longitud) del vector
    fun magnitude(): Double {
        return sqrt(x * x + y * y + z * z)
    }
}

fun main() {
    val vector1 = Vector3D(1.0, 2.0, 3.0)
    val vector2 = Vector3D(4.0, 5.0, 6.0)

    // Suma de vectores
    val suma = vector1 + vector2
    println("Suma: $suma")

    // Producto escalar
    val escalar = 2.5
    val productoEscalar = vector1 * escalar
    println("Producto escalar: $productoEscalar")

    // Producto cruz
    val productoCruz = vector1 crossProduct vector2
    println("Producto cruz: $productoCruz")

    // Magnitud (longitud) del vector
    val magnitud = vector1.magnitude()
    println("Magnitud: $magnitud")
}
